;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : StepMotor_control
;Version :
;Date    : 19/04/2020
;Author  :
;Company :
;Comments:
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <delay.h>
;#include <stdio.h>
;#include <stdlib.h>
;// Declare your global variables here
;
;#define a1 PORTB.1
;#define a2 PORTB.2
;#define b1 PORTB.3
;#define b2 PORTB.4
;
;unsigned int i = 0;
;unsigned int tt = 1;
;unsigned int tt2 = 1;
;unsigned int delayTime = 10; //delay time in ms
;
;float speed;
;char buffer[16];
;char f2s_buffer[16];
;//unsigned int count_test = 0;
;
;//int codea1[] = {1,0,0,1};
;//int codea2[] = {0,1,1,0};
;//int codeb1[] = {1,1,0,0};
;//int codeb2[] = {0,0,1,1};
;
;int counterclockwise_code[] = {0x10,0x18,0x08,0x0c,0x04,0x06,0x02,0x12};//, 0x09,0x01,0x03,0x02,0x06,0x04,0x0c,0x08 ;

	.DSEG
;int clockwise_code[] = {0x12,0x02,0x06,0x04,0x0c,0x08,0x18,0x10};//, 0x0E, 0x0A, 0x0B, 0x09};
;int trunggian[]={0x12,0x02,0x06,0x04,0x0c,0x08,0x18,0x10};
;int trunggiantruoc[] = {0x12,0x02,0x06,0x04,0x0c,0x08,0x18,0x10};
;
;void clockwise_rotate(int delayTime){
; 0000 0038 void clockwise_rotate(int delayTime){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0039     //float delayTime = 60000.0/(4096.0 * speed); //delayTime in ms;
; 0000 003A     lcd_clear();
;PCODE: $0000000F VOL: 0
;	delayTime -> Y+0
;PCODE: $00000010 VOL: 0
; 0000 003B     lcd_gotoxy(0,0);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 003C     lcd_puts("Clockwise");
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 003D     for(i = 0; i<8 ;i++){
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 003E         trunggian[i] =  clockwise_code[i];
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003F         trunggiantruoc[i] = trunggian[i];
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0040     }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0041     for(i = 0; i<8; i++){
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0042         PORTB = trunggian[i];
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0043         //trunggiantruoc[i] = trunggian[i];
; 0000 0044         delay_ms(delayTime);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0045     }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0046 }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0

	.DSEG
_0x7:
	.BYTE 0xA
;
;void counterclockwise_rotate(int delayTime){
; 0000 0048 void counterclockwise_rotate(int delayTime){

	.CSEG
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0049     //float delayTime = 60000.0/(4096.0 * speed); //delayTime in ms
; 0000 004A     lcd_clear();
;PCODE: $0000005B VOL: 0
;	delayTime -> Y+0
;PCODE: $0000005C VOL: 0
; 0000 004B     lcd_gotoxy(0,0);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 004C     lcd_puts("Counter clock");
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 004D     for(i = 0; i<8 ;i++){
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 004E         trunggian[i] =  counterclockwise_code[i];
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 004F         trunggiantruoc[i] = trunggian[i];
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0050     }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0051     for(i = 0; i<8; i++){
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0052         PORTB = trunggian[i];
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0053         delay_ms(delayTime);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0054     }
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0055 }
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0

	.DSEG
_0xE:
	.BYTE 0xE
;
;// External Interrupt 0 service routine
;// Place your code here
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 005A {

	.CSEG
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 005B      delay_ms(100);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 005C     /* lcd_clear();
; 0000 005D     lcd_gotoxy(0,0);
; 0000 005E     ftoa(tt2, 2, f2s_buffer);
; 0000 005F     sprintf(buffer, "tt2 = %s", f2s_buffer);
; 0000 0060     lcd_puts(buffer); */
; 0000 0061      if(tt2==0){
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0062         tt2=1;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0063          clockwise_rotate(delayTime);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0064      }
; 0000 0065      else{
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0066         tt2=0;
;PCODE: $000000B2 VOL: 0
; 0000 0067         counterclockwise_rotate(delayTime);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0068 
; 0000 0069      }
;PCODE: $000000B5 VOL: 0
; 0000 006A }
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 006E {
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 006F     delay_ms(100);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0070     /*lcd_clear();
; 0000 0071     lcd_gotoxy(0,0);
; 0000 0072     ftoa(tt, 2, f2s_buffer);
; 0000 0073     sprintf(buffer, "tt = %s", f2s_buffer);
; 0000 0074     lcd_puts(buffer);  */
; 0000 0075      if(tt ==1){
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0076         lcd_clear();
;PCODE: $000000C1 VOL: 0
; 0000 0077         lcd_gotoxy(0,0);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0078         lcd_puts("Stop!");
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0079         for(i = 0; i<8; i++){
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 007A           trunggian[i] = 0;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 007B         }
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 007C         tt=0;
;PCODE: $000000DE VOL: 0
; 0000 007D      }
; 0000 007E      else{
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 007F         if(trunggiantruoc[0] == clockwise_code[0]){
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0080             lcd_clear();
;PCODE: $000000E5 VOL: 0
; 0000 0081             lcd_gotoxy(0,0);
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0082             lcd_puts("Clockwise");
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0083         }
; 0000 0084         else{
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0085             lcd_clear();
;PCODE: $000000EF VOL: 0
; 0000 0086             lcd_gotoxy(0,0);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0087             lcd_puts("Counter clock");
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0088         }
;PCODE: $000000F7 VOL: 0
; 0000 0089         for(i = 0; i<8; i++){
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 008A           trunggian[i] = trunggiantruoc[i];
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 008B         }
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 008C         tt=1;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 008D      }
;PCODE: $00000115 VOL: 0
; 0000 008E }
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0

	.DSEG
_0x18:
	.BYTE 0x1E
;
;
;void main(void)
; 0000 0092 {

	.CSEG
;PCODE: $00000119 VOL: 0
; 0000 0093 // External Interrupt(s) initialization
; 0000 0094 // INT0: On
; 0000 0095 // INT0 Mode: Falling Edge
; 0000 0096 // INT1: On
; 0000 0097 // INT1 Mode: Falling Edge
; 0000 0098 // INT2: Off
; 0000 0099 GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 009A MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 009B MCUCSR=(0<<ISC2);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 009C GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 009D // Global enable interrupts
; 0000 009E #asm("sei")
;PCODE: $00000123 VOL: 0
	sei
;PCODE: $00000124 VOL: 0
; 0000 009F 
; 0000 00A0 // Port A initialization
; 0000 00A1 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00A2 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00A3 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00A4 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00A5 
; 0000 00A6 // Port B initialization
; 0000 00A7 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00A8 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00A9 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 00AA PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00AB 
; 0000 00AC // Port C initialization
; 0000 00AD // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00AE DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00AF // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00B0 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00B1 
; 0000 00B2 // Port D initialization
; 0000 00B3 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00B4 DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00B5 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00B6 PORTD=(0<<PORTD7) | (0<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00B7 
; 0000 00B8 // Alphanumeric LCD initialization
; 0000 00B9 // Connections are specified in the
; 0000 00BA // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00BB // RS - PORTA Bit 0
; 0000 00BC // RD - PORTA Bit 1
; 0000 00BD // EN - PORTA Bit 2
; 0000 00BE // D4 - PORTA Bit 4
; 0000 00BF // D5 - PORTA Bit 5
; 0000 00C0 // D6 - PORTA Bit 6
; 0000 00C1 // D7 - PORTA Bit 7
; 0000 00C2 // Characters/line: 8
; 0000 00C3 lcd_init(16);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00C4 lcd_puts("Welcome!");
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00C5 delay_ms(100);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00C6 lcd_clear();
;PCODE: $0000013D VOL: 0
; 0000 00C7 
; 0000 00C8 
; 0000 00C9 lcd_gotoxy(0,0);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00CA lcd_puts("Clockwise");
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00CB     while(1){
;PCODE: $00000145 VOL: 0
; 0000 00CC         speed = (1000.0*60.0)/(512.0*8.0*delayTime);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00CD         ftoa(speed, 2, f2s_buffer);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00CE         sprintf(buffer, "Speed = %srpm", f2s_buffer);
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00CF         lcd_gotoxy(0,1);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00D0         lcd_puts(buffer);
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00D1         /*if (PIND.4!=0 && PIND.5!=0){
; 0000 00D2             for(i = 0;i<8;i++){
; 0000 00D3                 PORTB = trunggian[i];
; 0000 00D4                 delay_ms(delayTime);
; 0000 00D5             }
; 0000 00D6         }  */
; 0000 00D7         if (PIND.4==0){
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 00D8             delay_ms(100);
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00D9             if(delayTime > 1)    delayTime -= 1;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00DA             //for(i = 0;i<8;i++){
; 0000 00DB               //  PORTB = trunggian[i];
; 0000 00DC              //   delay_ms(delayTime);
; 0000 00DD             //}
; 0000 00DE         }
;PCODE: $00000171 VOL: 0
; 0000 00DF         if (PIND.5==0){
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00E0             delay_ms(100);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00E1             delayTime += 2;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00E2             //for(i = 0;i<8;i++){
; 0000 00E3             //    PORTB = trunggian[i];
; 0000 00E4             //    delay_ms(delayTime);
; 0000 00E5             //}
; 0000 00E6         }
; 0000 00E7         for(i = 0;i<8;i++){
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00E8                 PORTB = trunggian[i];
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00E9                 delay_ms(delayTime);
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00EA         }
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 00EB 
; 0000 00EC     }
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00ED }
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0

	.DSEG
_0x22:
	.BYTE 0x13
