
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c5  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054a  00000000  00000000  00000741  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f2  00000000  00000000  00000c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000323  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002c  00000000  00000000  000011c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	DDRC = 0b00001111;
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0b00000000;
  70:	15 ba       	out	0x15, r1	; 21
	DDRD = 0b00000010;
  72:	82 e0       	ldi	r24, 0x02	; 2
  74:	81 bb       	out	0x11, r24	; 17
	int count= 0;
  76:	80 e0       	ldi	r24, 0x00	; 0
			if(count %2==0){
				sbi(PORTD,1);
				count =1;
			}else{
				cbi(PORTD,1);
				count =0;
  78:	20 e0       	ldi	r18, 0x00	; 0
		{
			while(bit_is_clear(PIND,0)){}
			sbi(PORTD, 2);	
			if(count %2==0){
				sbi(PORTD,1);
				count =1;
  7a:	91 e0       	ldi	r25, 0x01	; 1
// 			sbi(PORTC,i);
// 			_delay_ms(100);
// 			cbi(PORTC,i);
// 			_delay_ms(100);
// 		}
		if(bit_is_clear(PIND,0))
  7c:	80 99       	sbic	0x10, 0	; 16
  7e:	fe cf       	rjmp	.-4      	; 0x7c <main+0x10>
		{
			while(bit_is_clear(PIND,0)){}
  80:	80 9b       	sbis	0x10, 0	; 16
  82:	fe cf       	rjmp	.-4      	; 0x80 <main+0x14>
			sbi(PORTD, 2);	
  84:	92 9a       	sbi	0x12, 2	; 18
			if(count %2==0){
  86:	80 fd       	sbrc	r24, 0
  88:	03 c0       	rjmp	.+6      	; 0x90 <main+0x24>
				sbi(PORTD,1);
  8a:	91 9a       	sbi	0x12, 1	; 18
				count =1;
  8c:	89 2f       	mov	r24, r25
  8e:	f6 cf       	rjmp	.-20     	; 0x7c <main+0x10>
			}else{
				cbi(PORTD,1);
  90:	91 98       	cbi	0x12, 1	; 18
				count =0;
  92:	82 2f       	mov	r24, r18
  94:	f3 cf       	rjmp	.-26     	; 0x7c <main+0x10>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
